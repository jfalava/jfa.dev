---
import Master from "@/layouts/Master.astro";
import BackToHome from "@/components/reusables/navigation/BackToHome.astro";
//
import StyledBlockquote, {
  BlockquoteType,
} from "@/components/reusables/text-elements/StyledBlockquote.tsx";
import SimpleTooltip from "@/components/reusables/text-elements/SimpleTooltip.tsx";
//
import CompleteCurrentLocalTime from "@/components/reusables/date/GetCurrentDate.tsx";
//
import DivisorLine from "@/components/reusables/text-elements/DivisorLine.astro";
//
import DownloadCV from "@/components/cv/DownloadCV.astro";
//
interface Props {
  locale: string;
  metaTitle: string;
  metaDescription: string;
  metaKeywords: string;
  metaImageURL: string;
  metaImageFormat: string;
  metaImageWidth: string;
  metaImageHeight: string;
  metaImageAlt: string;
  localizedBackToHome: string;
  localizedNavIndex: string;
  localizedCVIndex: string;
  localizedSocials: string;
  localizedWebReleases: string;
  localizedContact: string;
  localizedContactMe: string;
  localizedOtherLinks: string;
  localizedSiteMap: string;
  localizedAcknowledgements: string;
  localizedDownloadTheCV: string;
  localizedEmail: string;
}

const {
  locale,
  metaTitle,
  metaDescription,
  metaKeywords,
  metaImageURL,
  metaImageFormat,
  metaImageWidth,
  metaImageHeight,
  metaImageAlt,
  localizedBackToHome,
  localizedNavIndex,
  localizedCVIndex,
  localizedSocials,
  localizedWebReleases,
  localizedContact,
  localizedContactMe,
  localizedOtherLinks,
  localizedSiteMap,
  localizedAcknowledgements,
  localizedDownloadTheCV,
  localizedEmail,
} = Astro.props as Props;
// Skills
let LocalizedSkills;
if (locale === "es") {
  LocalizedSkills = await import("@/content/cv/skills/Skills.es.md");
} else if (locale === "en") {
  LocalizedSkills = await import("@/content/cv/skills/Skills.es.md");
} else {
  LocalizedSkills = await import("@/content/cv/skills/Skills.es.md");
}
const Skills = LocalizedSkills.default;
// Work Experience
let LocalizedWorkExp;
if (locale === "es") {
  LocalizedWorkExp = await import("@/content/cv/work-exp/WorkExperience.es.md");
} else if (locale === "en") {
  LocalizedWorkExp = await import("@/content/cv/work-exp/WorkExperience.es.md");
} else {
  LocalizedWorkExp = await import("@/content/cv/work-exp/WorkExperience.es.md");
}
const WorkExperience = LocalizedWorkExp.default;
// Education
let LocalizedEducation;
if (locale === "es") {
  LocalizedEducation = await import("@/content/cv/education/Education.es.md");
} else if (locale === "en") {
  LocalizedEducation = await import("@/content/cv/education/Education.es.md");
} else {
  LocalizedEducation = await import("@/content/cv/education/Education.es.md");
}
const Education = LocalizedEducation.default;
// AboutMe
let LocalizedAboutMe;
if (locale === "es") {
  LocalizedAboutMe = await import("@/content/cv/about/About.es.md");
} else if (locale === "en") {
  LocalizedAboutMe = await import("@/content/cv/about/About.es.md");
} else {
  LocalizedAboutMe = await import("@/content/cv/about/About.es.md");
}
const AboutMe = LocalizedAboutMe.default;
function localizedHome() {
  if (locale === "es") {
    return `/`;
  } else if (locale) {
    return `/${locale}/`;
  } else {
    return `/`;
  }
}
---

<style>
  article {
    margin-top: 2%;
    margin-bottom: 2%;
  }
  @media (prefers-color-scheme: light) {
    .grid-background {
      background-size: 16px 16px;
      background-image: linear-gradient(to right, #d7defe 1px, transparent 1px),
        linear-gradient(to bottom, #d7defe 1px, transparent 1px);
      background-position: -9px -12px;
      margin: 2rem -10px -10px -10px;
      padding: 10px 10px 10px 10px;
    }
  }

  @media (prefers-color-scheme: dark) {
    .grid-background {
      background-size: 16px 16px;
      background-image: linear-gradient(to right, #313131 1px, transparent 1px),
        linear-gradient(to bottom, #313131 1px, transparent 1px);
      background-position: -9px -12px;
      margin: 2rem -10px -10px -10px;
      padding: 10px 10px 10px 10px;
    }
  }
</style>

<Master
  locale={locale}
  metaTitle={metaTitle}
  metaDescription={metaDescription}
  metaKeywords={metaKeywords}
  metaImageURL={metaImageURL}
  metaImageFormat={metaImageFormat}
  metaImageWidth={metaImageWidth}
  metaImageHeight={metaImageHeight}
  metaImageAlt={metaImageAlt}
  currentPage="cv"
  localizedSocials={localizedSocials}
  localizedWebReleases={localizedWebReleases}
  localizedContact={localizedContact}
  localizedContactMe={localizedContactMe}
  localizedOtherLinks={localizedOtherLinks}
  localizedSiteMap={localizedSiteMap}
  localizedAcknowledgements={localizedAcknowledgements}
  localizedNavIndex={localizedNavIndex}
  localizedCVIndex={localizedCVIndex}
  localizedEmail={localizedEmail}
>
  <div class="grid-background">
    <article id="aboutme-card">
      <AboutMe />
    </article>
    <DivisorLine />
    <article id="skills-card">
      <Skills />
      <div class="flex justify-end">
        <StyledBlockquote blockquoteType={BlockquoteType.Warning}>
          <p class="ml-2 italic">Actualmente desactualizado.</p>
          <CompleteCurrentLocalTime
            c="italic text-base mobile-only:text-xs"
            lang="es"
          />
        </StyledBlockquote>
      </div>
    </article>
    <DivisorLine />
    <article id="work-exp-card">
      <WorkExperience />
      <div class="flex flex-grow justify-end">
        <SimpleTooltip client:load content={localizedDownloadTheCV}>
          <DownloadCV />
        </SimpleTooltip>
      </div>
    </article>
    <DivisorLine />
    <article id="education-card">
      <Education />
    </article>
  </div>
  <div id="last-updated" class="mt-[2%] mobile-only:mt-[5%] flex justify-end">
    <StyledBlockquote blockquoteType={BlockquoteType.Updated}>
      <div class="flex items-center">
        <CompleteCurrentLocalTime
          c="italic text-base mobile-only:text-xs"
          lang={locale}
        />
      </div>
    </StyledBlockquote>
  </div>
  <BackToHome localizedText={localizedBackToHome} homeURL={localizedHome()} />
</Master>
